{"remainingRequest":"D:\\Belajar\\VueJS\\starter-kit\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!D:\\Belajar\\VueJS\\starter-kit\\src\\layouts\\components\\vertical-nav-menu\\VerticalNavMenu.vue?vue&type=style&index=0&lang=scss&","dependencies":[{"path":"D:\\Belajar\\VueJS\\starter-kit\\src\\layouts\\components\\vertical-nav-menu\\VerticalNavMenu.vue","mtime":1570088654000},{"path":"D:\\Belajar\\VueJS\\starter-kit\\node_modules\\css-loader\\index.js","mtime":499162500000},{"path":"D:\\Belajar\\VueJS\\starter-kit\\node_modules\\vue-loader\\lib\\loaders\\stylePostLoader.js","mtime":499162500000},{"path":"D:\\Belajar\\VueJS\\starter-kit\\node_modules\\postcss-loader\\src\\index.js","mtime":499162500000},{"path":"D:\\Belajar\\VueJS\\starter-kit\\node_modules\\sass-loader\\dist\\cjs.js","mtime":499162500000},{"path":"D:\\Belajar\\VueJS\\starter-kit\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"D:\\Belajar\\VueJS\\starter-kit\\node_modules\\vue-loader\\lib\\index.js","mtime":499162500000}],"contextDependencies":[],"result":["\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n@import \"@/assets/scss/vuexy/components/verticalNavMenu.scss\"\n",{"version":3,"sources":["VerticalNavMenu.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAwUA","file":"VerticalNavMenu.vue","sourceRoot":"src/layouts/components/vertical-nav-menu","sourcesContent":["<!-- =========================================================================================\n  File Name: VerticalNavMenu.vue\n  Description: Vertical NavMenu Component\n  Component Name: VerticalNavMenu\n  ----------------------------------------------------------------------------------------\n  Item Name: Vuexy - Vuejs, HTML & Laravel Admin Dashboard Template\n    Author: Pixinvent\n  Author URL: http://www.themeforest.net/user/pixinvent\n========================================================================================== -->\n\n\n<template>\n  <div class=\"parentx\">\n\n    <vs-sidebar\n      class=\"v-nav-menu items-no-padding\"\n      v-model=\"isVerticalNavMenuActive\"\n      ref=\"verticalNavMenu\"\n      default-index=\"-1\"\n      :click-not-close=\"clickNotClose\"\n      :reduce-not-rebound=\"reduceNotRebound\"\n      :parent=\"parent\"\n      :hiddenBackground=\"clickNotClose\"\n      :reduce=\"reduce\"\n      v-hammer:swipe.left=\"onSwipeLeft\">\n\n      <div @mouseenter=\"mouseEnter\" @mouseleave=\"mouseLeave\">\n\n        <!-- Header -->\n        <div class=\"header-sidebar flex items-end justify-between\" slot=\"header\">\n\n          <!-- Logo -->\n          <router-link tag=\"div\" class=\"vx-logo cursor-pointer flex items-center\" to=\"/\">\n            <img :src=\"logo\" alt=\"logo\" class=\"w-10 mr-4\" v-if=\"logo\">\n            <span class=\"vx-logo-text\" v-show=\"isMouseEnter || !reduce\" v-if=\"title\">{{ title }}</span>\n          </router-link>\n          <!-- /Logo -->\n\n          <!-- Menu Buttons -->\n          <div>\n            <!-- Close Button -->\n            <template v-if=\"showCloseButton\">\n              <feather-icon icon=\"XIcon\" class=\"m-0 cursor-pointer\" @click=\"$store.commit('TOGGLE_IS_VERTICAL_NAV_MENU_ACTIVE', false)\" />\n            </template>\n\n            <!-- Toggle Buttons -->\n            <template v-else-if=\"!showCloseButton && !verticalNavMenuItemsMin\">\n              <feather-icon\n                id=\"btnVNavMenuMinToggler\"\n                class=\"mr-0 cursor-pointer\"\n                :icon=\"reduce ? 'CircleIcon' : 'DiscIcon'\"\n                svg-classes=\"stroke-current\"\n                @click=\"toggleReduce(!reduce)\" />\n            </template>\n          </div>\n          <!-- /Menu Toggle Buttons -->\n        </div>\n        <!-- /Header -->\n\n        <!-- Header Shadow -->\n        <div class=\"shadow-bottom\" v-show=\"showShadowBottom\" />\n\n        <!-- Menu Items -->\n        <VuePerfectScrollbar ref=\"verticalNavMenuPs\" class=\"scroll-area-v-nav-menu pt-2\" :settings=\"settings\" @ps-scroll-y=\"psSectionScroll\">\n          <template v-for=\"(item, index) in menuItemsUpdated\">\n\n            <!-- Group Header -->\n            <span v-if=\"item.header && !verticalNavMenuItemsMin\" class=\"navigation-header truncate\" :key=\"`header-${index}`\">\n              {{ item.header }}\n            </span>\n            <!-- /Group Header -->\n\n            <template v-else-if=\"!item.header\">\n\n              <!-- Nav-Item -->\n              <v-nav-menu-item\n                v-if=\"!item.submenu\"\n                :key=\"`item-${index}`\"\n                :index=\"index\"\n                :to=\"item.slug !== 'external' ? item.url : null\"\n                :href=\"item.slug === 'external' ? item.url : null\"\n                :icon=\"item.icon\" :target=\"item.target\"\n                :isDisabled=\"item.isDisabled\"\n                :slug=\"item.slug\">\n                  <span v-show=\"!verticalNavMenuItemsMin\" class=\"truncate\">{{ item.name }}</span>\n                  <vs-chip class=\"ml-auto\" :color=\"item.tagColor\" v-if=\"item.tag && (isMouseEnter || !reduce)\">{{ item.tag }}</vs-chip>\n              </v-nav-menu-item>\n\n              <!-- Nav-Group -->\n              <template v-else>\n                <v-nav-menu-group\n                  :key=\"`group-${index}`\"\n                  :openHover=\"openGroupHover\"\n                  :group=\"item\"\n                  :groupIndex=\"index\"\n                  :open=\"isGroupActive(item)\" />\n              </template>\n              <!-- /Nav-Group -->\n            </template>\n          </template>\n        </VuePerfectScrollbar>\n        <!-- /Menu Items -->\n      </div>\n    </vs-sidebar>\n\n    <!-- Swipe Gesture -->\n    <div\n      v-if=\"!isVerticalNavMenuActive\"\n      class=\"v-nav-menu-swipe-area\"\n      v-hammer:swipe.right=\"onSwipeAreaSwipeRight\" />\n    <!-- /Swipe Gesture -->\n  </div>\n</template>\n\n\n<script>\nimport VuePerfectScrollbar from 'vue-perfect-scrollbar'\nimport VNavMenuGroup from './VerticalNavMenuGroup.vue'\nimport VNavMenuItem from './VerticalNavMenuItem.vue'\n\nexport default {\n  name: 'v-nav-menu',\n  components: {\n    VNavMenuGroup,\n    VNavMenuItem,\n    VuePerfectScrollbar,\n  },\n  props: {\n    logo:             { type: String },\n    openGroupHover:   { type: Boolean, default: false },\n    parent:           { type: String },\n    reduceNotRebound: { type: Boolean, default: true },\n    navMenuItems:     { type: Array,   required: true },\n    title:            { type: String },\n  },\n  data: () => ({\n    clickNotClose       : false, // disable close navMenu on outside click\n    isMouseEnter        : false,\n    reduce              : false, // determines if navMenu is reduce - component property\n    showCloseButton     : false, // show close button in smaller devices\n    settings            : {      // perfectScrollbar settings\n      maxScrollbarLength: 60,\n      wheelSpeed        : 1,\n      swipeEasing       : true\n    },\n    showShadowBottom    : false,\n  }),\n  computed: {\n    isGroupActive() {\n      return (item) => {\n        const path        = this.$route.fullPath\n        const routeParent = this.$route.meta ? this.$route.meta.parent : undefined\n        let open          = false\n\n        let func = (item) => {\n          if (item.submenu) {\n            item.submenu.forEach((item) => {\n              if (item.url && (path === item.url || routeParent === item.slug)) { open = true }\n              else if (item.submenu) { func(item) }\n            })\n          }\n        }\n        func(item)\n        return open\n      }\n    },\n    menuItemsUpdated() {\n      let clone = this.navMenuItems.slice()\n\n      for(let [index, item] of this.navMenuItems.entries()) {\n        if (item.header && item.items.length && (index || 1)) {\n          let i = clone.findIndex(ix => ix.header === item.header)\n          for(let [subIndex, subItem] of item.items.entries()) {\n            clone.splice(i + 1 + subIndex, 0, subItem)\n          }\n        }\n      }\n\n      return clone\n    },\n    isVerticalNavMenuActive: {\n      get()    { return this.$store.state.isVerticalNavMenuActive },\n      set(val) { this.$store.commit('TOGGLE_IS_VERTICAL_NAV_MENU_ACTIVE', val) }\n    },\n    layoutType() { return this.$store.state.mainLayoutType },\n    reduceButton: {\n      get()    { return this.$store.state.reduceButton },\n      set(val) { this.$store.commit('TOGGLE_REDUCE_BUTTON', val) }\n    },\n    isVerticalNavMenuReduced()   { return Boolean(this.reduce && this.reduceButton) },\n    verticalNavMenuItemsMin() { return this.$store.state.verticalNavMenuItemsMin },\n    windowWidth()     { return this.$store.state.windowWidth }\n  },\n  watch: {\n    '$route'() {\n      if (this.isVerticalNavMenuActive && this.showCloseButton) this.$store.commit('TOGGLE_IS_VERTICAL_NAV_MENU_ACTIVE', false)\n    },\n    reduce(val) {\n      const verticalNavMenuWidth = val ? \"reduced\" : \"default\"\n      this.$store.dispatch('updateVerticalNavMenuWidth', verticalNavMenuWidth)\n\n      setTimeout(function() {\n        window.dispatchEvent(new Event('resize'))\n      }, 100)\n    },\n    layoutType()   { this.setVerticalNavMenuWidth() },\n    reduceButton() { this.setVerticalNavMenuWidth() },\n    windowWidth()  { this.setVerticalNavMenuWidth() }\n  },\n  methods: {\n    // handleWindowResize(event) {\n    //   this.windowWidth = event.currentTarget.innerWidth;\n    //   this.setVerticalNavMenuWidth()\n    // },\n    onSwipeLeft() {\n      if (this.isVerticalNavMenuActive && this.showCloseButton) this.isVerticalNavMenuActive = false\n    },\n    onSwipeAreaSwipeRight() {\n      if (!this.isVerticalNavMenuActive && this.showCloseButton) this.isVerticalNavMenuActive = true\n    },\n    psSectionScroll() {\n      this.showShadowBottom = this.$refs.verticalNavMenuPs.$el.scrollTop > 0 ? true : false\n    },\n    mouseEnter() {\n      if (this.reduce) this.$store.commit('UPDATE_VERTICAL_NAV_MENU_ITEMS_MIN', false)\n      this.isMouseEnter = true\n    },\n    mouseLeave() {\n      if (this.reduce) this.$store.commit('UPDATE_VERTICAL_NAV_MENU_ITEMS_MIN', true)\n      this.isMouseEnter = false;\n    },\n    setVerticalNavMenuWidth() {\n\n      if(this.windowWidth > 1200) {\n        if(this.layoutType === 'vertical') {\n\n          // Set reduce\n          this.reduce = this.reduceButton ? true : false\n\n          // Open NavMenu\n          this.$store.commit('TOGGLE_IS_VERTICAL_NAV_MENU_ACTIVE', true)\n\n          // Set Menu Items Only Icon Mode\n          const verticalNavMenuItemsMin = (this.reduceButton && !this.isMouseEnter) ? true : false\n          this.$store.commit('UPDATE_VERTICAL_NAV_MENU_ITEMS_MIN', verticalNavMenuItemsMin)\n\n          // Menu Action buttons\n          this.clickNotClose   = true\n          this.showCloseButton = false\n\n          const verticalNavMenuWidth   = this.isVerticalNavMenuReduced ? \"reduced\" : \"default\"\n          this.$store.dispatch('updateVerticalNavMenuWidth', verticalNavMenuWidth)\n\n          return\n        }\n      }\n\n      // Close NavMenu\n      this.$store.commit('TOGGLE_IS_VERTICAL_NAV_MENU_ACTIVE', false)\n\n      // Reduce button\n      if (this.reduceButton) this.reduce = false\n\n      // Menu Action buttons\n      this.showCloseButton = true\n      this.clickNotClose   = false\n\n      // Update NavMenu Width\n      this.$store.dispatch('updateVerticalNavMenuWidth', 'no-nav-menu')\n\n      // Remove Only Icon in Menu\n      this.$store.commit('UPDATE_VERTICAL_NAV_MENU_ITEMS_MIN', false)\n\n\n\n      // if(this.layoutType === 'vertical' || (this.layoutType === 'horizontal' && this.windowWidth < 1200))\n      // if (this.windowWidth < 1200) {\n\n      //   // Close NavMenu\n      //   this.$store.commit('TOGGLE_IS_VERTICAL_NAV_MENU_ACTIVE', false)\n\n      //   // Reduce button\n      //   if (this.reduceButton) this.reduce = false\n\n      //   // Menu Action buttons\n      //   this.showCloseButton = true\n      //   this.clickNotClose   = false\n\n      //   // Update NavMenu Width\n      //   this.$store.dispatch('updateVerticalNavMenuWidth', 'no-nav-menu')\n\n      //   // Remove Only Icon in Menu\n      //   this.$store.commit('UPDATE_VERTICAL_NAV_MENU_ITEMS_MIN', false)\n\n      // } else {\n\n      //   // Set reduce\n      //   this.reduce = this.reduceButton ? true : false\n\n      //   // Open NavMenu\n      //   this.$store.commit('TOGGLE_IS_VERTICAL_NAV_MENU_ACTIVE', true)\n\n      //   // Set Menu Items Only Icon Mode\n      //   const verticalNavMenuItemsMin = (this.reduceButton && !this.isMouseEnter) ? true : false\n      //   this.$store.commit('UPDATE_VERTICAL_NAV_MENU_ITEMS_MIN', verticalNavMenuItemsMin)\n\n      //   // Menu Action buttons\n      //   this.clickNotClose   = true\n      //   this.showCloseButton = false\n\n      //   const verticalNavMenuWidth   = this.isVerticalNavMenuReduced ? \"reduced\" : \"default\"\n      //   this.$store.dispatch('updateVerticalNavMenuWidth', verticalNavMenuWidth)\n      // }\n    },\n    toggleReduce(val) {\n      this.reduceButton = val\n      this.setVerticalNavMenuWidth()\n    },\n  },\n  mounted() {\n    this.setVerticalNavMenuWidth()\n  },\n}\n\n</script>\n\n\n<style lang=\"scss\">\n@import \"@/assets/scss/vuexy/components/verticalNavMenu.scss\"\n</style>\n"]}]}